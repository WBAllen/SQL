-For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

--CREATING THE TABLE

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 

--I investigated the entire Data Set, 

SELECT * 
FROM BIT_DB.SpotifyData;

--Then I wondered what the top 5 loudest tracks might be

SELECT artist_name, track_name, loudness
FROM BIT_DB.SpotifyData
ORDER BY loudness desc
LIMIT 5
;

--Then I wondered what tracks might have the fastest tempo

SELECT artist_name, track_name, tempo
FROM BIT_DB.SpotifyData
ORDER BY tempo desc
LIMIT 5
;

--And here's an example of a query using a CTE

WITH popularity_average_CTE AS (
SELECT s.artist_name, avg(popularity) AS average_popularity
FROM Spotifydata s
GROUP BY s.artist_name
)

SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
